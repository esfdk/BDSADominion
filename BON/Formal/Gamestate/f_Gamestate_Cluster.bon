static_diagram GAMESTATE_CLUSTER
component
	class GAMESTATE
		indexing
			author: "Jakob Melnyk (jmel@itu.dk)";
		feature
		--Queries
		ActivePlayer : PLAYER
		InActionPhase : BOOLEAN
		InBuyPhase : BOOLEAN
		GetPhase : NATURAL
		GetPlayers : SEQUENCE[PLAYER]
		GetSupply : TABLE[CARD_NAME, NATURAL]
		GetTrash : SEQUENCE[CARD]
		NumberOfPlayers : NATURAL
			ensure Result >= 2 and Result <= 4
		end
		NumberOfActionsLeft : NATURAL
		NumberOfBuysLeft : NATURAL
		NumberOfCoinsLeft : NATURAL
		NewGamestate : GAMESTATE 
			-> numberOfPlayers : NATURAL 
			-> startSupply : TABLE[CARD_NAME, NATURAL]
			require numberOfPlayers >= 2 and numberOfPlayers <= 4
		end
		
		--Ccmmands
		SetActivePlayer -> playerNumber : NATURAL
			require playerNumber >= 1 and playerNumber <= NumberOfPlayers
		end
		StartActionPhase
			require InActionPhase = false and InBuyPhase = false
			ensure InActionPhase = true and InBuyPhase = false
		end
		EndActionPhase
			require InActionPhase = true and InBuyPhase = false
			ensure InActionPhase = false and InBuyPhase = false
		end
		StartBuyPhase
			require InActionPhase = false and InBuyPhase = false
			ensure InActionPhase = false and InBuyPhase = true
		end
		EndBuyPhase
			require InActionPhase = false and InBuyPhase = true
			ensure InActionPhase = false and InBuyPhase = false
		end
		DoCleanUp
			require InActionPhase = false and InBuyPhase = false
		end
		IncreaseActions 
			-> amount : INTEGER
			require amount + NumberOfActionsLeft >= 0
		end
		IncreaseBuys
			-> amount : INTEGER
			require amount + NumberOfBuysLeft >= 0
		end
		IncreaseCoins
			-> amount : INTEGER
			require amount + NumberOfCoinsLeft >= 0
		end
		PlayerGainsCard
			-> player : PLAYER
			-> card : CARD_NAME
			require player member_of GetPlayers
		end
	end
	class PLAYER
		indexing
			author: "Jakob Melnyk (jmel@itu.dk)";
		feature
		--Queries
		GetAllCards : SET[CARD]
		GetDeckSize : NATURAL
		GetDiscardSize : NATURAL
		GetHand : SEQUENCE[CARD]
		GetPlayerNumber : NATURAL
		GetTopOfDiscard : CARD
			require GetDiscardSize /= 0
		end
		GetTopOfDeck : CARD
			require GetDiscardSize /= 0
		end
		GetPlayed : SEQUENCE[CARD]
		GetTemporaryZone : SEQUENCE[CARD]
		
		--Commands
		MoveFromZoneToTemporary
			-> zone : ZONE
			require (zone = DECK or zone = DISCARD) and (zone = DECK -> (GetDeckSize = 0 and GetDiscardSize = 0) /= true)
					and (zone = DISCARD -> (GetDiscardSize /= 0))
			
			ensure GetTemporaryZone.Count = old GetTemporaryZone.Count + 1	and (zone = DECK -> GetDeckSize = old GetDeckSize - 1) and (GetTopOfDeck /= old GetTopOfDeck)
					and (zone = DISCARD -> GetDiscardSize = old GetDiscardSize - 1) and (GetTopOfDiscard /= old GetTopOfDiscard)
		end
		MoveFromHandToTemporary
			->card : CARD
			require GetHand.Contains(card) = false
			ensure GetHand.Contains(card) = false and GetTemporaryZone.Contains(card)
		end
		MoveFromTemporary
			-> card : CARD
			-> zone : ZONE
			require (zone = DECK or zone = DISCARD or zone = HAND or zone = PLAYED) and GetTemporaryZone.Contains(card)
			ensure (GetTemporaryZone.Count = old GetTemporaryZone.Count - 1) and 
					(zone = DECK -> GetDeckSize = old GetDeckSize +1 ) and
					(zone = DECK -> GetTopOfDeck = old GetTemporaryZone.Get(old GetTemporaryZone.Count - 1)) and
					(zone = DISCARD -> GetDiscardSize = old GetDiscardSize + 1) and
					(zone = DISCARD -> GetTopOfDiscard = old GetTemporaryZone.Get(old GetTemporaryZone.Count - 1)) and
					(zone = HAND -> GetHand.Count = old GetHand.Count + 1) and GetHand.Contains(card) and
					(zone = HAND -> GetHand.Get(GetHand.Count - 1) = old GetTemporaryZone.Get(old GetTemporaryZone.Count - 1)) and 
					(zone = PLAYED -> GetPlayed.Count = old Played.Count + 1) and
					(zone = PLAYED -> GetPlayed.Get(Played.Count - 1) = old GetTemporaryZone.Get(old GetTemporaryZone.Count - 1))
		end
		AddCardToZone
			-> card : CARD
			-> zone : ZONE
			require (zone = DECK or zone = DISCARD or zone = HAND or zone = PLAYED)
			ensure GetAllCards.Contains(card) and 
					(zone = HAND -> GetHand.Get(GetHand.Count - 1) = card) and
					(zone = HAND -> GetHand.Count = old GetHand.Count + 1) and
					(zone = PLAYED -> GetPlayed.Get(GetPlayed.Count - 1) = card) and
					(zone = PLAYED -> GetPlayed.Count = old GetPlayed.Count + 1) and
					(zone = DISCARD -> GetDiscardSize = old GetDiscardSize + 1) and
					(zone = DISCARD -> GetTopOfDiscard = card) and
					(zone = DECK -> GetDeckSize = old GetDeckSize +1 ) and
					(zone = Deck -> GetTopOfDeck = card)
		end
		RemoveCardFromZone
			-> card : CARD
			-> zone : ZONE
		DrawCard
		
		--Invariant: A card cannot be in the DECK, DISCARD, HAND or PLAYED zones of a player 
		--           if it is not in the 'ALL CARDS'.
	end
	class ZONE
		indexing
			author: "Jakob Melnyk (jmel@itu.dk)";
		feature
		--Queries
		value : STRING 
			ensure Result = "DECK" or Result = "DISCARD" or Result = "HAND" or Result = "SUPPLY" or Result = "TRASH" or Result = "PLAYED"
		end
		--Commands
	end
end 